#! /usr/bin/env perl

use strict;
use utf8;
use Hydra::Model::DB;

STDOUT->autoflush();
STDERR->autoflush(1);
binmode STDERR, ":encoding(utf8)";

my $db = Hydra::Model::DB->new();
my $vacuum = $db->storage->dbh->prepare("VACUUM;");

my $dryRun = defined $ENV{'HYDRA_DRY_RUN'};

my $batchSize = 10000;
my $iterationsPerVacuum = 10;

sub backfillJobsJobsetId {
    print STDERR "Backfilling Jobs records where jobset_id is NULL...\n";

    my $totalToGoSth = $db->storage->dbh->prepare(<<QUERY);
SELECT COUNT(*) FROM jobs WHERE jobset_id IS NULL
QUERY

    $totalToGoSth->execute();
    my ($totalToGo) = $totalToGoSth->fetchrow_array;

    my $update10kJobs = $db->storage->dbh->prepare(<<QUERY);
UPDATE jobs
SET jobset_id = (
  SELECT jobsets.id
  FROM jobsets
  WHERE jobsets.name = jobs.jobset
    AND jobsets.project = jobs.project
)
WHERE (jobs.project, jobs.jobset, jobs.name) in (
  SELECT jobsprime.project, jobsprime.jobset, jobsprime.name
  FROM jobs jobsprime
  WHERE jobsprime.jobset_id IS NULL
  FOR UPDATE SKIP LOCKED
  LIMIT ?
);
QUERY

    print STDERR "Total Jobs records without a jobset_id: $totalToGo\n";

    my $iteration = 0;
    my $affected;
    do {
        $iteration++;
        $affected = $update10kJobs->execute($batchSize);
        print STDERR "(batch #$iteration; $totalToGo remaining) Jobs.jobset_id: affected $affected rows...\n";
        $totalToGo -= $affected;

        if ($iteration % $iterationsPerVacuum == 0) {
            print STDERR "(batch #$iteration) Vacuuming...\n";
            $vacuum->execute();
        }
    } while ($affected > 0);
}


sub backfillBuildsJobsetId {
    print STDERR "Backfilling Builds records where jobset_id is NULL...\n";

    my $totalToGoSth = $db->storage->dbh->prepare(<<QUERY);
SELECT COUNT(*) FROM builds WHERE jobset_id IS NULL
QUERY

    $totalToGoSth->execute();
    my ($totalToGo) = $totalToGoSth->fetchrow_array;

    my $update10kBuilds = $db->storage->dbh->prepare(<<QUERY);
UPDATE builds
SET jobset_id = (
  SELECT jobsets.id
  FROM jobsets
  WHERE jobsets.name = builds.jobset
    AND jobsets.project = builds.project
)
WHERE builds.id in (
  SELECT buildprime.id
  FROM builds buildprime
  WHERE buildprime.jobset_id IS NULL
  ORDER BY buildprime.id
  FOR UPDATE SKIP LOCKED
  LIMIT ?
);
QUERY

    print STDERR "Total Builds records without a jobset_id: $totalToGo\n";

    my $iteration = 0;
    my $affected;
    do {
        $iteration++;
        $affected = $update10kBuilds->execute($batchSize);
        print STDERR "(batch #$iteration; $totalToGo remaining) Builds.jobset_id: affected $affected rows...\n";
        $totalToGo -= $affected;

        if ($iteration % $iterationsPerVacuum == 0) {
            print STDERR "(batch #$iteration) Vacuuming...\n";
            $vacuum->execute();
        }
    } while ($affected > 0);
}

die "syntax: $0\n" unless @ARGV == 0;

print STDERR "Beginning with a VACUUM\n";
$vacuum->execute();

backfillJobsJobsetId();
backfillBuildsJobsetId();

print STDERR "Ending with a VACUUM\n";
$vacuum->execute();
